{
  "version": 3,
  "sources": ["../keystone.ts", "../auth.ts", "../schema/page.ts", "../utils/acess.ts", "../schema/user.ts", "../schema/index.ts"],
  "sourcesContent": ["// Welcome to Keystone!\r\n//\r\n// This file is what Keystone uses as the entry-point to your headless backend\r\n//\r\n// Keystone imports the default export of this file, expecting a Keystone configuration object\r\n//   you can find out more at https://keystonejs.com/docs/apis/config\r\n\r\nimport { config } from '@keystone-6/core';\r\n\r\n// to keep this file tidy, we define our schema in a different file\r\n// import { lists } from './schema';\r\n\r\n// authentication is configured separately here too, but you might move this elsewhere\r\n// when you write your list-level access control functions, as they typically rely on session data\r\nimport { withAuth, session } from './auth';\r\nimport { lists } from './schema';\r\n\r\nexport default withAuth(\r\n  config({\r\n    db: {\r\n      // we're using sqlite for the fastest startup experience\r\n      //   for more information on what database might be appropriate for you\r\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\r\n      provider: 'sqlite',\r\n      url: 'file:./keystone.db',\r\n    },\r\n    lists,\r\n    session,\r\n  })\r\n);\r\n", "\r\n\r\nimport { randomBytes } from 'crypto';\r\nimport { createAuth } from '@keystone-6/auth';\r\n\r\n// see https://keystonejs.com/docs/apis/session for the session docs\r\nimport { statelessSessions } from '@keystone-6/core/session';\r\n\r\n// for a stateless session, a SESSION_SECRET should always be provided\r\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\r\nlet sessionSecret = process.env.SESSION_SECRET;\r\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\r\n  sessionSecret = randomBytes(32).toString('hex');\r\n}\r\n\r\n// withAuth is a function we can use to wrap our base configuration\r\nconst { withAuth } = createAuth({\r\n  listKey: 'User',\r\n  identityField: 'email',\r\n\r\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\r\n  //   this can be helpful for when you are writing your access control functions\r\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\r\n  sessionData: 'id ',\r\n  secretField: 'password',\r\n\r\n  // WARNING: remove initFirstItem functionality in production\r\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\r\n  initFirstItem: {\r\n    // if there are no items in the database, by configuring this field\r\n    //   you are asking the Keystone AdminUI to create a new user\r\n    //   providing inputs for these fields\r\n    fields: [ 'email'],\r\n\r\n    // it uses context.sudo() to do this, which bypasses any access control you might have\r\n    //   you shouldn't use this in production\r\n  },\r\n});\r\n\r\n// statelessSessions uses cookies for session tracking\r\n//   these cookies have an expiry, in seconds\r\n//   we use an expiry of 30 days for this starter\r\nconst sessionMaxAge = 60 * 60 * 24 * 30;\r\n\r\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\r\nconst session = statelessSessions({\r\n  maxAge: sessionMaxAge,\r\n  secret: sessionSecret!,\r\n});\r\n\r\nexport { withAuth, session };\r\n", "\r\nimport { list } from '@keystone-6/core';\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  multiselect,\r\n  checkbox\r\n} from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\nimport { isSignedIn } from '../utils/acess';\r\n\r\nexport const Page = list({\r\n  ui: {\r\n    label: 'page',\r\n  },\r\n  access: {\r\n    operation: {\r\n      create: isSignedIn,\r\n      query: isSignedIn,\r\n      update: isSignedIn,\r\n      delete: isSignedIn,\r\n    },\r\n  },\r\n  hooks: {\r\n    afterOperation: async ({ context, operation, item }) => {\r\n      if(operation===\"create\"){\r\n    //   const expoTokens = await context.prisma.PushToken.findMany({});\r\n        // console.log(expoTokens)\r\n        // await pushNotification(expoTokens, item.title);\r\n    }\r\n    },\r\n  },\r\n  fields: {\r\n    title: text(),\r\n     articleId: text(),\r\n    url: text({ validation: { isRequired: true } }),\r\n    \r\n  },\r\n});\r\n", "// import { ListAccessArgs } from '../types';\r\n\r\nexport function isSignedIn({ session }: any) {\r\n  return !!session;\r\n}\r\n", "import { graphql, list } from \"@keystone-6/core\";\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  virtual,\r\n} from \"@keystone-6/core/fields\";\r\n\r\nexport const User = list({\r\n  access: {\r\n    operation: {\r\n      create: () => true,\r\n      query: () => true,\r\n      update: () => true,\r\n      delete: () => true,\r\n    },\r\n  },\r\n  fields: {\r\n    firstName: text({ validation: { isRequired: true } }),\r\n    lastName:\r\n      text(),\r\n      \r\n\r\n    email: text({ isIndexed: \"unique\" }),\r\n    password: password({ validation: { isRequired: true } }),\r\n    linkedinId:\r\n      text(),\r\n\r\n  \r\n  },\r\n  ui: {\r\n    listView: {\r\n      initialColumns: [],\r\n    },\r\n  },\r\n});\r\n", "import { Page } from \"./page\";\r\nimport { User } from \"./user\";\r\n\r\nexport const lists = {\r\n    User , Page\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,IAAAA,eAAuB;;;ACLvB,oBAA4B;AAC5B,kBAA2B;AAG3B,qBAAkC;AAIlC,IAAI,gBAAgB,QAAQ,IAAI;AAChC,IAAI,CAAC,iBAAiB,QAAQ,IAAI,aAAa,cAAc;AAC3D,sBAAgB,2BAAY,EAAE,EAAE,SAAS,KAAK;AAChD;AAGA,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC9B,SAAS;AAAA,EACT,eAAe;AAAA;AAAA;AAAA;AAAA,EAKf,aAAa;AAAA,EACb,aAAa;AAAA;AAAA;AAAA,EAIb,eAAe;AAAA;AAAA;AAAA;AAAA,IAIb,QAAQ,CAAE,OAAO;AAAA;AAAA;AAAA,EAInB;AACF,CAAC;AAKD,IAAM,gBAAgB,KAAK,KAAK,KAAK;AAGrC,IAAM,cAAU,kCAAkB;AAAA,EAChC,QAAQ;AAAA,EACR,QAAQ;AACV,CAAC;;;AC/CD,kBAAqB;AACrB,oBAQO;;;ACRA,SAAS,WAAW,EAAE,SAAAC,SAAQ,GAAQ;AAC3C,SAAO,CAAC,CAACA;AACX;;;ADUO,IAAM,WAAO,kBAAK;AAAA,EACvB,IAAI;AAAA,IACF,OAAO;AAAA,EACT;AAAA,EACA,QAAQ;AAAA,IACN,WAAW;AAAA,MACT,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,IACV;AAAA,EACF;AAAA,EACA,OAAO;AAAA,IACL,gBAAgB,OAAO,EAAE,SAAS,WAAW,KAAK,MAAM;AACtD,UAAG,cAAY,UAAS;AAAA,MAI1B;AAAA,IACA;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,WAAO,oBAAK;AAAA,IACX,eAAW,oBAAK;AAAA,IACjB,SAAK,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,EAEhD;AACF,CAAC;;;AEzCD,IAAAC,eAA8B;AAC9B,IAAAC,iBAOO;AAEA,IAAM,WAAO,mBAAK;AAAA,EACvB,QAAQ;AAAA,IACN,WAAW;AAAA,MACT,QAAQ,MAAM;AAAA,MACd,OAAO,MAAM;AAAA,MACb,QAAQ,MAAM;AAAA,MACd,QAAQ,MAAM;AAAA,IAChB;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,eAAW,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACpD,cACE,qBAAK;AAAA,IAGP,WAAO,qBAAK,EAAE,WAAW,SAAS,CAAC;AAAA,IACnC,cAAU,yBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACvD,gBACE,qBAAK;AAAA,EAGT;AAAA,EACA,IAAI;AAAA,IACF,UAAU;AAAA,MACR,gBAAgB,CAAC;AAAA,IACnB;AAAA,EACF;AACF,CAAC;;;AClCM,IAAM,QAAQ;AAAA,EACjB;AAAA,EAAO;AACX;;;ALYA,IAAO,mBAAQ;AAAA,MACb,qBAAO;AAAA,IACL,IAAI;AAAA;AAAA;AAAA;AAAA,MAIF,UAAU;AAAA,MACV,KAAK;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": ["import_core", "session", "import_core", "import_fields"]
}
