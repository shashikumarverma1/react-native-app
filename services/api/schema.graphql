# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  password: PasswordState
  linkedinId: String
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  linkedinId: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  linkedinId: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  linkedinId: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  linkedinId: String
}

type MySchool {
  id: ID!
  name: String
  teacher(where: TeacherWhereInput! = {}, orderBy: [TeacherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeacherWhereUniqueInput): [Teacher!]
  teacherCount(where: TeacherWhereInput! = {}): Int
  class(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classCount(where: ClassWhereInput! = {}): Int
  subject(where: SubjectWhereInput! = {}, orderBy: [SubjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubjectWhereUniqueInput): [Subject!]
  subjectCount(where: SubjectWhereInput! = {}): Int
  student(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudentWhereUniqueInput): [Student!]
  studentCount(where: StudentWhereInput! = {}): Int
}

input MySchoolWhereUniqueInput {
  id: ID
}

input MySchoolWhereInput {
  AND: [MySchoolWhereInput!]
  OR: [MySchoolWhereInput!]
  NOT: [MySchoolWhereInput!]
  id: IDFilter
  name: StringFilter
  teacher: TeacherManyRelationFilter
  class: ClassManyRelationFilter
  subject: SubjectManyRelationFilter
  student: StudentManyRelationFilter
}

input TeacherManyRelationFilter {
  every: TeacherWhereInput
  some: TeacherWhereInput
  none: TeacherWhereInput
}

input ClassManyRelationFilter {
  every: ClassWhereInput
  some: ClassWhereInput
  none: ClassWhereInput
}

input SubjectManyRelationFilter {
  every: SubjectWhereInput
  some: SubjectWhereInput
  none: SubjectWhereInput
}

input StudentManyRelationFilter {
  every: StudentWhereInput
  some: StudentWhereInput
  none: StudentWhereInput
}

input MySchoolOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input MySchoolUpdateInput {
  name: String
  teacher: TeacherRelateToManyForUpdateInput
  class: ClassRelateToManyForUpdateInput
  subject: SubjectRelateToManyForUpdateInput
  student: StudentRelateToManyForUpdateInput
}

input TeacherRelateToManyForUpdateInput {
  disconnect: [TeacherWhereUniqueInput!]
  set: [TeacherWhereUniqueInput!]
  create: [TeacherCreateInput!]
  connect: [TeacherWhereUniqueInput!]
}

input ClassRelateToManyForUpdateInput {
  disconnect: [ClassWhereUniqueInput!]
  set: [ClassWhereUniqueInput!]
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

input SubjectRelateToManyForUpdateInput {
  disconnect: [SubjectWhereUniqueInput!]
  set: [SubjectWhereUniqueInput!]
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

input StudentRelateToManyForUpdateInput {
  disconnect: [StudentWhereUniqueInput!]
  set: [StudentWhereUniqueInput!]
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

input MySchoolUpdateArgs {
  where: MySchoolWhereUniqueInput!
  data: MySchoolUpdateInput!
}

input MySchoolCreateInput {
  name: String
  teacher: TeacherRelateToManyForCreateInput
  class: ClassRelateToManyForCreateInput
  subject: SubjectRelateToManyForCreateInput
  student: StudentRelateToManyForCreateInput
}

input TeacherRelateToManyForCreateInput {
  create: [TeacherCreateInput!]
  connect: [TeacherWhereUniqueInput!]
}

input ClassRelateToManyForCreateInput {
  create: [ClassCreateInput!]
  connect: [ClassWhereUniqueInput!]
}

input SubjectRelateToManyForCreateInput {
  create: [SubjectCreateInput!]
  connect: [SubjectWhereUniqueInput!]
}

input StudentRelateToManyForCreateInput {
  create: [StudentCreateInput!]
  connect: [StudentWhereUniqueInput!]
}

type Teacher {
  id: ID!
  name: String
  school: MySchool
  gender: TeacherGenderType
}

enum TeacherGenderType {
  Male
  Female
  Other
}

input TeacherWhereUniqueInput {
  id: ID
}

input TeacherWhereInput {
  AND: [TeacherWhereInput!]
  OR: [TeacherWhereInput!]
  NOT: [TeacherWhereInput!]
  id: IDFilter
  name: StringFilter
  school: MySchoolWhereInput
  gender: TeacherGenderTypeNullableFilter
}

input TeacherGenderTypeNullableFilter {
  equals: TeacherGenderType
  in: [TeacherGenderType!]
  notIn: [TeacherGenderType!]
  not: TeacherGenderTypeNullableFilter
}

input TeacherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  gender: OrderDirection
}

input TeacherUpdateInput {
  name: String
  school: MySchoolRelateToOneForUpdateInput
  gender: TeacherGenderType
}

input MySchoolRelateToOneForUpdateInput {
  create: MySchoolCreateInput
  connect: MySchoolWhereUniqueInput
  disconnect: Boolean
}

input TeacherUpdateArgs {
  where: TeacherWhereUniqueInput!
  data: TeacherUpdateInput!
}

input TeacherCreateInput {
  name: String
  school: MySchoolRelateToOneForCreateInput
  gender: TeacherGenderType
}

input MySchoolRelateToOneForCreateInput {
  create: MySchoolCreateInput
  connect: MySchoolWhereUniqueInput
}

type Student {
  id: ID!
  name: String
  class: Class
  subject(where: SubjectWhereInput! = {}, orderBy: [SubjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubjectWhereUniqueInput): [Subject!]
  subjectCount(where: SubjectWhereInput! = {}): Int
  gender: StudentGenderType
  school: MySchool
}

enum StudentGenderType {
  Male
  Female
  Other
}

input StudentWhereUniqueInput {
  id: ID
}

input StudentWhereInput {
  AND: [StudentWhereInput!]
  OR: [StudentWhereInput!]
  NOT: [StudentWhereInput!]
  id: IDFilter
  name: StringFilter
  class: ClassWhereInput
  subject: SubjectManyRelationFilter
  gender: StudentGenderTypeNullableFilter
  school: MySchoolWhereInput
}

input StudentGenderTypeNullableFilter {
  equals: StudentGenderType
  in: [StudentGenderType!]
  notIn: [StudentGenderType!]
  not: StudentGenderTypeNullableFilter
}

input StudentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  gender: OrderDirection
}

input StudentUpdateInput {
  name: String
  class: ClassRelateToOneForUpdateInput
  subject: SubjectRelateToManyForUpdateInput
  gender: StudentGenderType
  school: MySchoolRelateToOneForUpdateInput
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input StudentUpdateArgs {
  where: StudentWhereUniqueInput!
  data: StudentUpdateInput!
}

input StudentCreateInput {
  name: String
  class: ClassRelateToOneForCreateInput
  subject: SubjectRelateToManyForCreateInput
  gender: StudentGenderType
  school: MySchoolRelateToOneForCreateInput
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type Class {
  id: ID!
  name: String
  school: MySchool
}

input ClassWhereUniqueInput {
  id: ID
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  name: StringFilter
  school: MySchoolWhereInput
}

input ClassOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ClassUpdateInput {
  name: String
  school: MySchoolRelateToOneForUpdateInput
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  name: String
  school: MySchoolRelateToOneForCreateInput
}

type Subject {
  id: ID!
  name: String
  school: MySchool
}

input SubjectWhereUniqueInput {
  id: ID
}

input SubjectWhereInput {
  AND: [SubjectWhereInput!]
  OR: [SubjectWhereInput!]
  NOT: [SubjectWhereInput!]
  id: IDFilter
  name: StringFilter
  school: MySchoolWhereInput
}

input SubjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SubjectUpdateInput {
  name: String
  school: MySchoolRelateToOneForUpdateInput
}

input SubjectUpdateArgs {
  where: SubjectWhereUniqueInput!
  data: SubjectUpdateInput!
}

input SubjectCreateInput {
  name: String
  school: MySchoolRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createMySchool(data: MySchoolCreateInput!): MySchool
  createMySchools(data: [MySchoolCreateInput!]!): [MySchool]
  updateMySchool(where: MySchoolWhereUniqueInput!, data: MySchoolUpdateInput!): MySchool
  updateMySchools(data: [MySchoolUpdateArgs!]!): [MySchool]
  deleteMySchool(where: MySchoolWhereUniqueInput!): MySchool
  deleteMySchools(where: [MySchoolWhereUniqueInput!]!): [MySchool]
  createTeacher(data: TeacherCreateInput!): Teacher
  createTeachers(data: [TeacherCreateInput!]!): [Teacher]
  updateTeacher(where: TeacherWhereUniqueInput!, data: TeacherUpdateInput!): Teacher
  updateTeachers(data: [TeacherUpdateArgs!]!): [Teacher]
  deleteTeacher(where: TeacherWhereUniqueInput!): Teacher
  deleteTeachers(where: [TeacherWhereUniqueInput!]!): [Teacher]
  createStudent(data: StudentCreateInput!): Student
  createStudents(data: [StudentCreateInput!]!): [Student]
  updateStudent(where: StudentWhereUniqueInput!, data: StudentUpdateInput!): Student
  updateStudents(data: [StudentUpdateArgs!]!): [Student]
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteStudents(where: [StudentWhereUniqueInput!]!): [Student]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createSubject(data: SubjectCreateInput!): Subject
  createSubjects(data: [SubjectCreateInput!]!): [Subject]
  updateSubject(where: SubjectWhereUniqueInput!, data: SubjectUpdateInput!): Subject
  updateSubjects(data: [SubjectUpdateArgs!]!): [Subject]
  deleteSubject(where: SubjectWhereUniqueInput!): Subject
  deleteSubjects(where: [SubjectWhereUniqueInput!]!): [Subject]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  mySchools(where: MySchoolWhereInput! = {}, orderBy: [MySchoolOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MySchoolWhereUniqueInput): [MySchool!]
  mySchool(where: MySchoolWhereUniqueInput!): MySchool
  mySchoolsCount(where: MySchoolWhereInput! = {}): Int
  teachers(where: TeacherWhereInput! = {}, orderBy: [TeacherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TeacherWhereUniqueInput): [Teacher!]
  teacher(where: TeacherWhereUniqueInput!): Teacher
  teachersCount(where: TeacherWhereInput! = {}): Int
  students(where: StudentWhereInput! = {}, orderBy: [StudentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StudentWhereUniqueInput): [Student!]
  student(where: StudentWhereUniqueInput!): Student
  studentsCount(where: StudentWhereInput! = {}): Int
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  class(where: ClassWhereUniqueInput!): Class
  classesCount(where: ClassWhereInput! = {}): Int
  subjects(where: SubjectWhereInput! = {}, orderBy: [SubjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubjectWhereUniqueInput): [Subject!]
  subject(where: SubjectWhereUniqueInput!): Subject
  subjectsCount(where: SubjectWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
