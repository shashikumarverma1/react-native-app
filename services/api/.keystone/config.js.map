{
  "version": 3,
  "sources": ["../keystone.ts", "../auth.ts", "../schema/class.ts", "../utils/acess.ts", "../schema/myschool.ts", "../schema/student.ts", "../schema/subject.ts", "../utils/mail.ts", "../schema/teachers.ts", "../schema/user.ts", "../schema/index.ts"],
  "sourcesContent": ["// Welcome to Keystone!\n//\n// This file is what Keystone uses as the entry-point to your headless backend\n//\n// Keystone imports the default export of this file, expecting a Keystone configuration object\n//   you can find out more at https://keystonejs.com/docs/apis/config\n\nimport { config } from '@keystone-6/core';\n\n// to keep this file tidy, we define our schema in a different file\n// import { lists } from './schema';\n\n// authentication is configured separately here too, but you might move this elsewhere\n// when you write your list-level access control functions, as they typically rely on session data\nimport { withAuth, session } from './auth';\nimport { lists } from './schema';\n\nexport default withAuth(\n  config({\n    db: {\n      // we're using sqlite for the fastest startup experience\n      //   for more information on what database might be appropriate for you\n      //   see https://keystonejs.com/docs/guides/choosing-a-database#title\n      provider: 'sqlite',\n      url: 'file:./keystone.db',\n    },\n    lists,\n    session,\n  })\n);\n", "\n\nimport { randomBytes } from 'crypto';\nimport { createAuth } from '@keystone-6/auth';\n\n// see https://keystonejs.com/docs/apis/session for the session docs\nimport { statelessSessions } from '@keystone-6/core/session';\n\n// for a stateless session, a SESSION_SECRET should always be provided\n//   especially in production (statelessSessions will throw if SESSION_SECRET is undefined)\nlet sessionSecret = process.env.SESSION_SECRET;\nif (!sessionSecret && process.env.NODE_ENV !== 'production') {\n  sessionSecret = randomBytes(32).toString('hex');\n}\n\n// withAuth is a function we can use to wrap our base configuration\nconst { withAuth } = createAuth({\n  listKey: 'User',\n  identityField: 'email',\n\n  // this is a GraphQL query fragment for fetching what data will be attached to a context.session\n  //   this can be helpful for when you are writing your access control functions\n  //   you can find out more at https://keystonejs.com/docs/guides/auth-and-access-control\n  sessionData: 'id ',\n  secretField: 'password',\n\n  // WARNING: remove initFirstItem functionality in production\n  //   see https://keystonejs.com/docs/config/auth#init-first-item for more\n  initFirstItem: {\n    // if there are no items in the database, by configuring this field\n    //   you are asking the Keystone AdminUI to create a new user\n    //   providing inputs for these fields\n    fields: [ 'email'],\n\n    // it uses context.sudo() to do this, which bypasses any access control you might have\n    //   you shouldn't use this in production\n  },\n});\n\n// statelessSessions uses cookies for session tracking\n//   these cookies have an expiry, in seconds\n//   we use an expiry of 30 days for this starter\nconst sessionMaxAge = 60 * 60 * 24 * 30;\n\n// you can find out more at https://keystonejs.com/docs/apis/session#session-api\nconst session = statelessSessions({\n  maxAge: sessionMaxAge,\n  secret: sessionSecret!,\n});\n\nexport { withAuth, session };\n", "\r\nimport { list } from '@keystone-6/core';\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  multiselect,\r\n  checkbox\r\n} from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\nimport { isSignedIn } from '../utils/acess';\r\n\r\nexport const Class = list({\r\n  ui: {\r\n    label: 'Class',\r\n  },\r\n  access: {\r\n    operation: {\r\n      create: isSignedIn,\r\n      query: isSignedIn,\r\n      update: isSignedIn,\r\n      delete: isSignedIn,\r\n    },\r\n  },\r\n  hooks: {\r\n    afterOperation: async ({ context, operation, item }) => {\r\n      if(operation===\"create\"){\r\n    //   const expoTokens = await context.prisma.PushToken.findMany({});\r\n        // console.log(expoTokens)\r\n        // await pushNotification(expoTokens, item.title);\r\n    }\r\n    },\r\n  },\r\n  fields: {\r\n    name: text(),\r\n    school:relationship({ref:\"MySchool\"})\r\n    \r\n  },\r\n});\r\n", "// import { ListAccessArgs } from '../types';\r\n\r\nexport function isSignedIn({ session }: any) {\r\n  return !!session;\r\n}\r\n", "\r\nimport { list } from '@keystone-6/core';\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  multiselect,\r\n  checkbox\r\n} from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\nimport { isSignedIn } from '../utils/acess';\r\n\r\nexport const MySchool = list({\r\n  ui: {\r\n    label: 'My School',\r\n  },\r\n  access: {\r\n    operation: {\r\n      create: isSignedIn,\r\n      query: isSignedIn,\r\n      update: isSignedIn,\r\n      delete: isSignedIn,\r\n    },\r\n  },\r\n  hooks: {\r\n    afterOperation: async ({ context, operation, item }) => {\r\n      if(operation===\"create\"){\r\n    //   const expoTokens = await context.prisma.PushToken.findMany({});\r\n        // console.log(expoTokens)\r\n        // await pushNotification(expoTokens, item.title);\r\n    }\r\n    },\r\n  },\r\n  fields: {\r\n    name: text(),\r\n    teacher:relationship({ref:\"Teacher\" , many:true}),\r\n    class:relationship({ref:\"Class\"  , many:true}) ,\r\n    subject:relationship({ref:\"Subject\" , many:true}),\r\n    student:relationship({ref:\"Student\" , many:true}),\r\n   \r\n\r\n    \r\n  },\r\n});\r\n", "\r\nimport { list } from '@keystone-6/core';\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  multiselect,\r\n  checkbox\r\n} from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\nimport { isSignedIn } from '../utils/acess';\r\n\r\nexport const Student = list({\r\n  ui: {\r\n    label: 'Student',\r\n  },\r\n  access: {\r\n    operation: {\r\n      create: isSignedIn,\r\n      query: isSignedIn,\r\n      update: isSignedIn,\r\n      delete: isSignedIn,\r\n    },\r\n  },\r\n  hooks: {\r\n    afterOperation: async ({ context, operation, item }) => {\r\n      if(operation===\"create\"){\r\n    //   const expoTokens = await context.prisma.PushToken.findMany({});\r\n        // console.log(expoTokens)\r\n        // await pushNotification(expoTokens, item.title);\r\n    }\r\n    },\r\n  },\r\n  fields: {\r\n    name: text(),\r\n    class:relationship({ref:\"Class\"}),\r\n    subject:relationship({ref:\"Subject\" , many:true}),\r\n    gender: select({\r\n      type: 'enum',\r\n      options: [\r\n        { label: 'Male', value: 'Male' },\r\n        { label: 'Female', value: 'Female' },\r\n        { label: 'Other', value: 'Other' },\r\n      ],\r\n      defaultValue: 'Male'\r\n    }),\r\n     \r\n\r\n\r\n\r\n    school:relationship({ref:\"MySchool\"}) ,\r\n\r\n   \r\n    \r\n  },\r\n});\r\n", "\r\nimport { list } from '@keystone-6/core';\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  multiselect,\r\n  checkbox\r\n} from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\nimport { isSignedIn } from '../utils/acess';\r\nimport { sendmail, students } from '../utils/mail';\r\n\r\nexport const Subject = list({\r\n  ui: {\r\n    label: 'Subject',\r\n  },\r\n  access: {\r\n    operation: {\r\n      create: isSignedIn,\r\n      query: isSignedIn,\r\n      update: isSignedIn,\r\n      delete: isSignedIn,\r\n    },\r\n  },\r\n  hooks: {\r\n    afterOperation: async ({ context, operation, item }) => {\r\n      if(operation===\"create\"){\r\n        console.log(operation)\r\n    //   const expoTokens = await context.prisma.PushToken.findMany({});\r\n        // console.log(expoTokens)\r\n        // await pushNotification(expoTokens, item.title);\r\n        students(item)\r\n    }\r\n    },\r\n  },\r\n  fields: {\r\n    name: text(),\r\n    school:relationship({ref:\"MySchool\"})\r\n    \r\n  },\r\n});\r\n", "const nodemailer = require('nodemailer');\r\n\r\nexport const sendmail=async(from :string,to:string , subject:string , )=>{\r\n   \r\n   let     text= 'This is a test email from Node.js using Nodemailer.'\r\n    // Create a transporter using your Gmail account\r\n    console.log('mail send')\r\nconst transporter = nodemailer.createTransport({\r\n    host: \"sandbox.smtp.mailtrap.io\",\r\n     port: 2525,\r\n    auth: {\r\n        user: \"aae229ad4da7c3\",\r\n        pass: \"99b506d031a205\"\r\n    }\r\n  });\r\n  \r\n  // Set up email data\r\n  \r\n  \r\n  // Send the email\r\n await  transporter.sendMail(\r\n    {\r\n        from: 'shashikumarverma1996@gmail.com',\r\n        to: 'skantverma1996@gmail.com.com',\r\n        subject: 'Test Email',\r\n        text: 'This is a test email from Node.js using Nodemailer.',\r\n       html:`<p>Dear Sir/Ma'am</br> `,\r\n        useHtml:true,\r\n        attachment: String\r\n      }\r\n  );\r\n}\r\n\r\nexport const students=async(item:any)=>{\r\n    console.log(item)\r\n    await sendmail(\r\n        'from' , 'to' ,'subject'\r\n    )\r\n}", "\r\nimport { list } from '@keystone-6/core';\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  multiselect,\r\n  checkbox\r\n} from '@keystone-6/core/fields';\r\nimport { document } from '@keystone-6/fields-document';\r\nimport { isSignedIn } from '../utils/acess';\r\n\r\nexport const Teacher = list({\r\n  ui: {\r\n    label: 'Teachers',\r\n  },\r\n  access: {\r\n    operation: {\r\n      create: isSignedIn,\r\n      query: isSignedIn,\r\n      update: isSignedIn,\r\n      delete: isSignedIn,\r\n    },\r\n  },\r\n  hooks: {\r\n    afterOperation: async ({ context, operation, item }) => {\r\n      if(operation===\"create\"){\r\n    //   const expoTokens = await context.prisma.PushToken.findMany({});\r\n        // console.log(expoTokens)\r\n        // await pushNotification(expoTokens, item.title);\r\n    }\r\n    },\r\n  },\r\n  fields: {\r\n    name: text(),\r\n    school:relationship({ref:\"MySchool\"}),\r\n    gender: select({\r\n        type: 'enum',\r\n        options: [\r\n          { label: 'Male', value: 'Male' },\r\n          { label: 'Female', value: 'Female' },\r\n          { label: 'Other', value: 'Other' },\r\n        ],\r\n        defaultValue: 'Male'\r\n      }),\r\n    \r\n  },\r\n});\r\n", "import { graphql, list } from \"@keystone-6/core\";\r\nimport {\r\n  text,\r\n  relationship,\r\n  password,\r\n  timestamp,\r\n  select,\r\n  virtual,\r\n} from \"@keystone-6/core/fields\";\r\n\r\nexport const User = list({\r\n  access: {\r\n    operation: {\r\n      create: () => true,\r\n      query: () => true,\r\n      update: () => true,\r\n      delete: () => true,\r\n    },\r\n  },\r\n  fields: {\r\n    firstName: text({ validation: { isRequired: true } }),\r\n    lastName:\r\n      text(),\r\n      \r\n\r\n    email: text({ isIndexed: \"unique\" }),\r\n    password: password({ validation: { isRequired: true } }),\r\n    linkedinId:\r\n      text(),\r\n\r\n  \r\n  },\r\n  ui: {\r\n    listView: {\r\n      initialColumns: [],\r\n    },\r\n  },\r\n});\r\n", "\r\nimport { Class } from \"./class\";\r\nimport { MySchool } from \"./myschool\";\r\nimport { Student } from \"./student\";\r\nimport { Subject } from \"./subject\";\r\nimport { Teacher } from \"./teachers\";\r\nimport { User } from \"./user\";\r\n\r\nexport const lists = {\r\n    User  ,MySchool , Teacher , Student   , Class  , Subject\r\n};\r\n"],
  "mappings": "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",
  "names": ["import_core", "session", "import_core", "import_fields", "import_core", "import_fields", "import_core", "import_fields", "text", "import_core", "import_fields", "import_core", "import_fields"]
}
